import requests
import json
from rich.console import Console
from rich.table import Table

# API Endpoints
NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"

# File paths
MAPPING_FILE = "cwe_to_mitre.json"
THREAT_ACTORS_FILE = "threat_actors.json"
MITIGATIONS_FILE = "mitigations.json"

console = Console()

def load_json(file_path):
    """Load JSON data from a file."""
    try:
        with open(file_path, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        console.print(f"[bold red]{file_path} not found![/bold red]")
        return {}
    except json.JSONDecodeError:
        console.print(f"[bold red]Error decoding {file_path}![/bold red]")
        return {}

def fetch_cve_details(cve_id):
    """Fetch CVE details from NVD API."""
    params = {"cveId": cve_id}
    response = requests.get(NVD_API_URL, params=params)

    if response.status_code == 200:
        data = response.json()
        if 'vulnerabilities' in data and len(data['vulnerabilities']) > 0:
            return data['vulnerabilities'][0]['cve']
    
    return None

def fetch_mitre_mappings(cve_data, mapping_dict):
    """Map CWE IDs from CVE data to MITRE ATT&CK techniques dynamically."""
    attack_mappings = {}

    # Extract CWE IDs from CVE data
    cwe_ids = []
    if "weaknesses" in cve_data:
        for weakness in cve_data["weaknesses"]:
            if "description" in weakness:
                for desc in weakness["description"]:
                    if "value" in desc:
                        cwe_ids.append(desc["value"])

    # Remove duplicate CWE IDs
    cwe_ids = list(set(cwe_ids))
    console.print(f"[bold yellow]Extracted CWE IDs: {cwe_ids}[/bold yellow]")

    if not cwe_ids:
        return {}

    # Match CWE IDs to MITRE techniques using the loaded JSON mapping
    for cwe_id in cwe_ids:
        if cwe_id in mapping_dict:
            technique_ids = mapping_dict[cwe_id]["technique_id"]
            technique_names = mapping_dict[cwe_id]["technique_name"]
            for tid, tname in zip(technique_ids, technique_names):
                attack_mappings[tid] = tname

    return attack_mappings, cwe_ids

def display_results(cve_data, attack_mappings, cwe_ids, threat_actors, mitigations):
    """Display CVE details, MITRE mappings, threat actors, and mitigations."""
    table = Table(title=f"CVE Details: {cve_data['id']}")
    table.add_column("Field", style="bold")
    table.add_column("Value")

    description = cve_data.get('descriptions', [{}])[0].get('value', "N/A")
    cvss_score = str(cve_data.get('metrics', {}).get('cvssMetricV31', [{}])[0].get('cvssData', {}).get('baseScore', "N/A"))
    
    table.add_row("Description", description)
    table.add_row("CVSS Score", cvss_score)

    attack_table = Table(title="MITRE ATT&CK Mappings")
    attack_table.add_column("Technique ID", style="bold")
    attack_table.add_column("Technique Name")
    attack_table.add_column("Mitigation")

    if attack_mappings:
        for technique_id, technique_name in attack_mappings.items():
            mitigation = mitigations.get(technique_id, "No mitigation available")
            attack_table.add_row(technique_id, technique_name, mitigation)
    else:
        attack_table.add_row("N/A", "No MITRE mappings found", "N/A")

    threat_actor_table = Table(title="Threat Actors")
    threat_actor_table.add_column("CWE ID", style="bold")
    threat_actor_table.add_column("Associated APT Group")

    for cwe_id in cwe_ids:
        threat_actor = threat_actors.get(cwe_id, "Unknown")
        threat_actor_table.add_row(cwe_id, threat_actor)

    console.print(table)
    console.print(attack_table)
    console.print(threat_actor_table)

def main():
    mapping_dict = load_json(MAPPING_FILE)
    threat_actors = load_json(THREAT_ACTORS_FILE)
    mitigations = load_json(MITIGATIONS_FILE)

    if not mapping_dict or not threat_actors or not mitigations:
        return
    
    cve_id = input("Enter CVE ID or search term: ")
    cve_data = fetch_cve_details(cve_id)

    if not cve_data:
        console.print("[bold red]CVE not found.[/bold red]")
        return
    
    console.print("[bold yellow]Fetching MITRE ATT&CK mappings...[/bold yellow]")

    attack_mappings, cwe_ids = fetch_mitre_mappings(cve_data, mapping_dict)

    display_results(cve_data, attack_mappings, cwe_ids, threat_actors, mitigations)

if __name__ == "__main__":
    main()
